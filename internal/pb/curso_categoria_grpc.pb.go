// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: internal/pb/curso_categoria.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoriaService_CriarCategoria_FullMethodName         = "/pb.CategoriaService/CriarCategoria"
	CategoriaService_CriarCategoriaStream_FullMethodName   = "/pb.CategoriaService/CriarCategoriaStream"
	CategoriaService_CriarCategoriaStreamBI_FullMethodName = "/pb.CategoriaService/CriarCategoriaStreamBI"
	CategoriaService_ListaCategorias_FullMethodName        = "/pb.CategoriaService/ListaCategorias"
	CategoriaService_GetCategoriaById_FullMethodName       = "/pb.CategoriaService/GetCategoriaById"
)

// CategoriaServiceClient is the client API for CategoriaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriaServiceClient interface {
	CriarCategoria(ctx context.Context, in *CreateCategoria, opts ...grpc.CallOption) (*Categoria, error)
	CriarCategoriaStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateCategoria, ListaDeCategorias], error)
	CriarCategoriaStreamBI(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateCategoria, Categoria], error)
	ListaCategorias(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*ListaDeCategorias, error)
	GetCategoriaById(ctx context.Context, in *GetCategoriaByIdInput, opts ...grpc.CallOption) (*Categoria, error)
}

type categoriaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriaServiceClient(cc grpc.ClientConnInterface) CategoriaServiceClient {
	return &categoriaServiceClient{cc}
}

func (c *categoriaServiceClient) CriarCategoria(ctx context.Context, in *CreateCategoria, opts ...grpc.CallOption) (*Categoria, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Categoria)
	err := c.cc.Invoke(ctx, CategoriaService_CriarCategoria_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriaServiceClient) CriarCategoriaStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateCategoria, ListaDeCategorias], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CategoriaService_ServiceDesc.Streams[0], CategoriaService_CriarCategoriaStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateCategoria, ListaDeCategorias]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CategoriaService_CriarCategoriaStreamClient = grpc.ClientStreamingClient[CreateCategoria, ListaDeCategorias]

func (c *categoriaServiceClient) CriarCategoriaStreamBI(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateCategoria, Categoria], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CategoriaService_ServiceDesc.Streams[1], CategoriaService_CriarCategoriaStreamBI_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateCategoria, Categoria]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CategoriaService_CriarCategoriaStreamBIClient = grpc.BidiStreamingClient[CreateCategoria, Categoria]

func (c *categoriaServiceClient) ListaCategorias(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*ListaDeCategorias, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaDeCategorias)
	err := c.cc.Invoke(ctx, CategoriaService_ListaCategorias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriaServiceClient) GetCategoriaById(ctx context.Context, in *GetCategoriaByIdInput, opts ...grpc.CallOption) (*Categoria, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Categoria)
	err := c.cc.Invoke(ctx, CategoriaService_GetCategoriaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriaServiceServer is the server API for CategoriaService service.
// All implementations must embed UnimplementedCategoriaServiceServer
// for forward compatibility.
type CategoriaServiceServer interface {
	CriarCategoria(context.Context, *CreateCategoria) (*Categoria, error)
	CriarCategoriaStream(grpc.ClientStreamingServer[CreateCategoria, ListaDeCategorias]) error
	CriarCategoriaStreamBI(grpc.BidiStreamingServer[CreateCategoria, Categoria]) error
	ListaCategorias(context.Context, *Blank) (*ListaDeCategorias, error)
	GetCategoriaById(context.Context, *GetCategoriaByIdInput) (*Categoria, error)
	mustEmbedUnimplementedCategoriaServiceServer()
}

// UnimplementedCategoriaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoriaServiceServer struct{}

func (UnimplementedCategoriaServiceServer) CriarCategoria(context.Context, *CreateCategoria) (*Categoria, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriarCategoria not implemented")
}
func (UnimplementedCategoriaServiceServer) CriarCategoriaStream(grpc.ClientStreamingServer[CreateCategoria, ListaDeCategorias]) error {
	return status.Errorf(codes.Unimplemented, "method CriarCategoriaStream not implemented")
}
func (UnimplementedCategoriaServiceServer) CriarCategoriaStreamBI(grpc.BidiStreamingServer[CreateCategoria, Categoria]) error {
	return status.Errorf(codes.Unimplemented, "method CriarCategoriaStreamBI not implemented")
}
func (UnimplementedCategoriaServiceServer) ListaCategorias(context.Context, *Blank) (*ListaDeCategorias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListaCategorias not implemented")
}
func (UnimplementedCategoriaServiceServer) GetCategoriaById(context.Context, *GetCategoriaByIdInput) (*Categoria, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriaById not implemented")
}
func (UnimplementedCategoriaServiceServer) mustEmbedUnimplementedCategoriaServiceServer() {}
func (UnimplementedCategoriaServiceServer) testEmbeddedByValue()                          {}

// UnsafeCategoriaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriaServiceServer will
// result in compilation errors.
type UnsafeCategoriaServiceServer interface {
	mustEmbedUnimplementedCategoriaServiceServer()
}

func RegisterCategoriaServiceServer(s grpc.ServiceRegistrar, srv CategoriaServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoriaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoriaService_ServiceDesc, srv)
}

func _CategoriaService_CriarCategoria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriaServiceServer).CriarCategoria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriaService_CriarCategoria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriaServiceServer).CriarCategoria(ctx, req.(*CreateCategoria))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriaService_CriarCategoriaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriaServiceServer).CriarCategoriaStream(&grpc.GenericServerStream[CreateCategoria, ListaDeCategorias]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CategoriaService_CriarCategoriaStreamServer = grpc.ClientStreamingServer[CreateCategoria, ListaDeCategorias]

func _CategoriaService_CriarCategoriaStreamBI_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriaServiceServer).CriarCategoriaStreamBI(&grpc.GenericServerStream[CreateCategoria, Categoria]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CategoriaService_CriarCategoriaStreamBIServer = grpc.BidiStreamingServer[CreateCategoria, Categoria]

func _CategoriaService_ListaCategorias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriaServiceServer).ListaCategorias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriaService_ListaCategorias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriaServiceServer).ListaCategorias(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriaService_GetCategoriaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriaByIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriaServiceServer).GetCategoriaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriaService_GetCategoriaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriaServiceServer).GetCategoriaById(ctx, req.(*GetCategoriaByIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoriaService_ServiceDesc is the grpc.ServiceDesc for CategoriaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CategoriaService",
	HandlerType: (*CategoriaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CriarCategoria",
			Handler:    _CategoriaService_CriarCategoria_Handler,
		},
		{
			MethodName: "ListaCategorias",
			Handler:    _CategoriaService_ListaCategorias_Handler,
		},
		{
			MethodName: "GetCategoriaById",
			Handler:    _CategoriaService_GetCategoriaById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CriarCategoriaStream",
			Handler:       _CategoriaService_CriarCategoriaStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CriarCategoriaStreamBI",
			Handler:       _CategoriaService_CriarCategoriaStreamBI_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/pb/curso_categoria.proto",
}
